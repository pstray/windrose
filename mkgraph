#! /usr/bin/perl

use strict;

use POSIX;
use Math::Trig;
use Date::Parse;

use Data::Dumper;

$Data::Dumper::Indent = $Data::Dumper::Sortkeys = 1;

my $sectors = 16;
my $avg_window_period = 10*60; # 10 minutes
my $sample_period = 60;

my $calm_size = 16;
my $circle_size = 72*2;
my $heading_circle_gap = 4;

my $default_font = "Verdana,sans";

my $heading_font = $default_font;
my $heading_fs = 12;

my $circle_pct_font = $default_font;
my $circle_pct_fs = 6;

my $calm_font = $default_font;
my $calm_fs = 8;

my $legend_font = $default_font;
my $legend_fs = 6;
my $legend_margin = 4;
my $legend_bar_width = 8;

# ----------------------------------------------------------------------

my @b_scale =
  (
   [  0.3, '#FFFFFF', 'Calm',         'Stille' ],
   [  1.5, '#CCFFFF', 'Light Air',    'Flau vind' ],
   [  3.3, '#99FFCC', 'Light Breeze', 'Svak vind' ],
   [  5.5, '#99FF99', 'Gentle Breeze', 'Lett bris' ],
   [  8.0, '#99FF66', 'Moderate Breeze', 'Laber bris' ],
   [ 10.8, '#99FF00', 'Fresh Breeze', 'Frisk bris' ],
   [ 13.9, '#CCFF00', 'Strong Breeze', 'Liten kuling' ],
   [ 17.2, '#FFFF00', 'Near Gale', 'Stiv kuling' ],
   [ 20.7, '#FFCC00', 'Gale', 'Sterk kuling' ],
   [ 24.5, '#FF9900', 'Strong Gale', 'Liten storm' ],
   [ 28.4, '#FF6600', 'Storm', 'Full storm' ],
   [ 32.6, '#FF3300', 'Violent Storm', 'Sterk storm' ],
   [ 36.9, '#FF0000', 'Hurricane Force', 'Orkan' ],
  );

for (0..@b_scale-1) {
    $b_scale[$_][0] = 0.836 * sqrt($_+0.5)**3;
}

sub  b_num {
    my($ms) = @_;
    my $b = 0;
    while ($b <= $#b_scale && $ms >= $b_scale[$b][0]) {
	$b++
    }
    return $b;
}

my $sect_size = 360/$sectors;
my $sect_off  = $sect_size/2;

my $max_wind = 0;

my $data;
my $data_sum;

my $data_points = 0;
my $calm_points = 0;
my $last_sample = 0;

my $avg_x = 0;
my $avg_y = 0;

my @avg_window = ();
my $max_avg = 0;

my $max_beufort = 0;

my $start_time = 0; # time - 60*60*24*7;

while (<>) {
    chomp;
    my($ts,$wind_speed_1,$gust,$direction_1) = split ",";

    # $ts = strftime "%F %T", localtime $ts unless $ts =~ /\D/;
    $ts = str2time($ts) if $ts =~ /\D/;

    my($x,$y);

    if ($direction_1 =~ /^NaN$/i) {
	$x = $y = 0;
    }
    else {
	$x = $wind_speed_1 * cos(deg2rad($direction_1));
	$y = $wind_speed_1 * sin(deg2rad($direction_1));
    }

    $avg_x += $x;
    $avg_y += $y;

    push @avg_window, [ $ts, $x, $y ];

    next unless $last_sample + $sample_period <= $ts;

    $last_sample = $ts;

    while ($ts - $avg_window[0][0] >= $avg_window_period) {
	my($ots, $ox, $oy) = @{shift @avg_window};
	$avg_x -= $ox;
	$avg_y -= $oy;
    }

    next unless $ts >= $start_time;

    $max_avg = @avg_window if @avg_window > $max_avg;

    my $wind_speed = sqrt($avg_x ** 2 + $avg_y ** 2)/@avg_window;
    my $direction = rad2deg(atan2($avg_y, $avg_x));

    $max_wind = $wind_speed if $wind_speed > $max_wind;

    my $sector = int(($direction+$sect_off)/$sect_size) % $sectors;
    my $beufort = b_num($wind_speed);

    $max_beufort = $beufort if $beufort > $max_beufort;

    if ($wind_speed < 0.0001) {
	$calm_points++;
    }
    else {
	$data->{$sector}{$beufort}++;
	$data_sum->{$beufort}++;
    }
    $data_points++;

}

my $max_pct_sum = 0;

my $pct_data;
my $min_sector = 0;
my $min_sector_val;

my $calm_pct = $calm_points*100/$data_points;

printf STDERR "calm: %3.2f\n", $calm_pct;

for my $s (0 .. $sectors-1) {
    printf STDERR "%3d: ", $s;
    my $pct_sum = 0;
    for my $b (0 .. $max_beufort) {
	my $pct = $data->{$s}{$b}*100/$data_points;

	printf STDERR " %5.2f", $pct;

	next unless $pct >= 0.05;

	$pct_data->{$s}[$b] = $pct;

	$pct_sum += $pct;
    }
    if ($min_sector_val > 0) {
	if ($min_sector_val > $pct_sum) {
	    $min_sector_val = $pct_sum;
	    $min_sector = $s;
	}
    }
    else {
	$min_sector_val = $pct_sum;
	$min_sector = $s;
    }

    $max_pct_sum = $pct_sum if $pct_sum > $max_pct_sum;
    printf STDERR " - %5.2f\n", $pct_sum;
}

my @pct_data_sum;

for my $b (0 .. $max_beufort) {
    my $pct = $data_sum->{$b}*100/$data_points;
    $pct_data_sum[$b] = $pct if $pct >= 0.05;
}
$pct_data_sum[0] += $calm_pct;

printf STDERR "\n";
for (0 .. $#pct_data_sum) {
    printf STDERR "%3d: %5.1f\n", $_, $pct_data_sum[$_];
}

my @xml;
my($min_x, $min_y, $max_x, $max_y) = (0,0,0,0);

# ----- Background compass rose

$max_pct_sum += $calm_pct/$sectors;

#my $pct_per_circle = ceil($max_pct_sum/6);
#my $num_circles = ceil($max_pct_sum/$pct_per_circle);
#my $circle_step = ($circle_size - $calm_size)/$num_circles;
#my $pct_scale = $circle_step / $pct_per_circle;

my $max_pct_circle = ceil($max_pct_sum);
my $pct_scale = $circle_size / $max_pct_circle;
my $pct_per_circle = ceil(($max_pct_circle-$calm_pct/$sectors)/6);

my $num_circles = ceil($max_pct_circle/$pct_per_circle);
my $circle_step = $circle_size/$num_circles;

my $calm_size = $calm_pct * $pct_scale / $sectors;

my $r = $circle_size;

xml(g => { stroke => "black",
	   "stroke-width" => 1,
	   fill => "white", #"#FFFFDD"
	 },
    map({ xml(circle => { r => $_ * $circle_step }) }
	reverse 1 .. $num_circles),
    xml(line => { x1 => -$r, x2 => $r }),
    xml(line => { y1 => -$r, y2 => $r }),
   );

xml(g => { "font-family" => $circle_pct_font,
	   "font-size" => $circle_pct_fs,
	   "text-anchor" => "middle",
	 },
    cxml({ dy => "0.1em",
	   "dominant-baseline" => "middle" },
	 map({
	      my $a = 2*pi*($min_sector/$sectors - 0.25);
	      my $x = ($_ * $circle_step) * cos($a);
	      my $y = ($_ * $circle_step) * sin($a);
#	      [ rect => { x => $d-$circle_pct_fs*2, y => $d-$circle_pct_fs/2,
#			  width => $circle_pct_fs*4, height => $circle_pct_fs,
#			  fill => "lime",
#			} ],
	      [ text => { x => $x, y => $y,
			  stroke => "white",
			  "stroke-width" => $circle_pct_fs/2,
			  "stroke-linejoin" => "round",
			},
		sprintf("%d%%", $_ * $pct_per_circle) ],
	      [ text => { x => $x, y => $y },
		sprintf("%d%%", $_ * $pct_per_circle) ],
	     }
	     1 .. $num_circles,
	    )
	),
   );

$r += $heading_circle_gap;

0+xml(g => { stroke => "pink",
	   "stroke-width" => 1,
	   fill => "none",
	 },
    xml(circle => { r => $r }),
    cxml({ width => $heading_fs, height => $heading_fs },
	 [ rect => { x => $r,                y => -$heading_fs/2    } ],
	 [ rect => { x => -($r+$heading_fs), y => -$heading_fs/2    } ],
	 [ rect => { x => -$heading_fs/2,    y => -($r+$heading_fs) } ],
	 [ rect => { x => -$heading_fs/2,    y => $r } ],
	),
   );

$r += $heading_fs/2;

xml(g => { "font-family" => $heading_font,
	   "font-size" => $heading_fs,
	   "text-anchor" => "middle",
	 },
    cxml({ dy => "0.1em",
	   "dominant-baseline" => "middle" },
	 [ text => { y => -$r }, "N" ],
	 [ text => { x =>  $r }, "E" ],
	 [ text => { y =>  $r }, "S" ],
	 [ text => { x => -$r }, "W" ],
	),
   );

$r += $heading_fs/2;

box(-$r, -$r, $r, $r);

# ------ Calm circle

xml(circle => { r => $calm_size,
		fill => $b_scale[0][1],
		stroke => "black",
		"stroke-width" => 1,
	      });
xml(text => { "font-family" => $calm_font,
	      "font-size" => $calm_fs,
	      "text-anchor" => "middle",
	      "dominant-baseline" => "middle",
	      dy => "0.1em",
	    },
    sprintf("%.1f%%", $calm_points*100/$data_points),
   );

# ----- draw the sectors

my $slice_off = pi/$sectors * 0.9;

#my @c = map { sprintf "#00%02X%02X", 0x11 * $_, 0xff - 0x11 * $_ } 0 .. 0xf;

for my $sector (0 .. $sectors-1) {

    my $a = 2*pi*($sector/$sectors - 0.25);

    my $a_start = $a - $slice_off;
    my $a_end   = $a + $slice_off;

    my $r1 = $calm_size;
    my $x1s = $r1*cos($a_start);
    my $y1s = $r1*sin($a_start);
    my $x1e = $r1*cos($a_end);
    my $y1e = $r1*sin($a_end);
    my @b = @{$pct_data->{$sector}};


    for my $b (0 .. $#b) {
	my $pct = $b[$b];

	my $r2  = $r1 + $pct * $pct_scale;
	my $x2s = $r2 * cos($a_start);
	my $y2s = $r2 * sin($a_start);
	my $x2e = $r2 * cos($a_end);
	my $y2e = $r2 * sin($a_end);

	my $path = sprintf "M %f %f", $x1s, $y1s;

	$path .= sprintf(" A %f %f 0 0 1 %f %f",
			 $r1, $r1,
			 $x1e, $y1e);

	$path .= sprintf(" L %f %f", $x2e, $y2e);
	$path .= sprintf(" A %f %f 0 0 0 %f %f",
			 $r2, $r2,
			 $x2s, $y2s,
			);
	$path .= " Z";

	xml(path => { d => $path,
		      stroke => "black", #$c[$sector],
		      "stroke-width" => 0.5,
		      fill => $b_scale[$b][1],
		    });

	($r1, $x1s, $y1s, $x1e, $y1e) = ($r2, $x2s, $y2s, $x2e, $y2e);
    }

}

# ----- legend

my $legend_x = $circle_size + $heading_circle_gap * 2 + $heading_fs;
my $legend_y = -$circle_size;
my $legend_width = $circle_size * 0.75;
my $legend_height = $circle_size * 2;

box($legend_x, $legend_y, $legend_x + $legend_width, $legend_y + $legend_height);

my $legend_bar_x = $legend_x + $legend_margin * 2 + $legend_fs * 2.5;
my $legend_bar_top = $legend_y + $legend_margin + $legend_fs / 2;
my $legend_bar_bottom = $legend_y + $legend_height - $legend_margin - $legend_fs / 2;;

my $legend_bar_height = $legend_bar_bottom - $legend_bar_top;
my $legend_bar_scale  = $legend_bar_height / $b_scale[$#pct_data_sum][0];

my @legend_bar;
my @legend_text;

my $legend_bar_y = $legend_bar_bottom;
my $legend_bar_ws = 0;

for my $b (0 .. $#pct_data_sum) {
    my $legend_bar_block_height =
      $legend_bar_scale * ($b_scale[$b][0] - $legend_bar_ws);
    $legend_bar_ws = $b_scale[$b][0];
    $legend_bar_y -= $legend_bar_block_height;

    push(@legend_bar,
	 xml(rect => { x => $legend_bar_x,
		       y => $legend_bar_y,
		       width => $legend_bar_width,
		       height => $legend_bar_block_height,
		       fill => $b_scale[$b][1],
		     }),
	);
    push(@legend_text,
	 xml(text => { x => $legend_bar_x + $legend_bar_width + $legend_margin,
		       y => $legend_bar_y + $legend_bar_block_height / 2,
		       "dominant-baseline" => "middle",
		       dy => "0.1em",
		     },
	     sprintf("%s (%.1f%%)", $b_scale[$b][3], $pct_data_sum[$b]),
	    ),
	 xml(text => { x => $legend_bar_x - $legend_margin,
		       y => $legend_bar_y,
		       "text-anchor" => "end",
		       "dominant-baseline" => "middle",
		       dy => "0.1em",
		     },
	     sprintf("%.1f", $b_scale[$b][0]),
	    ),
	);
}

xml(g => { stroke => "black",
	   "stroke-width" => 0.5,
	   fill => "pink",
	 },
    xml(rect => { x => $legend_x,
		  y => $legend_y,
		  width => $legend_width,
		  height => $legend_height,
		}),
    @legend_bar,
   );

xml(g => { "font-family" => $legend_font,
	   "font-size" => $legend_fs,
	   # "text-anchor" => "middle",
	 },
    @legend_text,
   );


# ----- print it all

printf qq{<?xml version="1.0" encoding="UTF-8" ?>\n};
printf qq{<svg xmlns="http://www.w3.org/2000/svg" version="1.1"\n};
printf(qq{     viewBox="%d %d %d %d"\n},
       $min_x-8, $min_y-8,
       $max_x-$min_x+16, $max_y-$min_y+16,
      );
print  qq{>\n};
print xml(rect => { x => $min_x-8,
		    y => $min_y-8,
		    width => $max_x-$min_x+16,
		    height => $max_y-$min_y+16,
		    fill => "#dfd",
		  });
for (@xml) {
    s/^(\s*<)/  $1/gm;
    print;
}
print  qq{</svg>\n};

exit;

# ----- subs

sub box {
    my($x1,$y1,$x2,$y2) = @_;
    for ($x1,$x2) {
	$min_x = $_ if $_ < $min_x;
	$max_x = $_ if $_ > $max_x;
    }
    for ($y1,$y2) {
	$min_y = $_ if $_ < $min_y;
	$max_y = $_ if $_ > $max_y;
    }
}

sub xml {
    my($tag) = shift;
    my($params,@children);

    if (ref $_[0]) {
	$params = shift;
	@children = @_;
    }
    else {
	$params = { @_ };
    }

    my $xml = "<$tag";
    for my $p (sort keys %$params) {
	$xml .= sprintf qq{ %s="%s"}, $p, $params->{$p};
    }
    if (@children) {
	$xml .= ">";
	$xml .= "\n" if $children[0] =~ /^\s*</;
	for (@children) {
	    s/^(\s*<)/  $1/gm;
	    $xml .= $_;
	}
	$xml .= "</$tag>";
    }
    else {
	$xml .= " />";
    }
    $xml .= "\n";

    if (defined wantarray) {
	return $xml;
    }
    else {
	push @xml, $xml;
    }
}

sub cxml {
    my($common) = shift;
    for (@_) {
	my($tag,$param,@children) = @$_;
	my %p = %$param;
	for my $p (keys %$common) {
	    $p{$p} = $common->{$p};
	}
	$_ = xml($tag,\%p,@children);
    }
    @_;
}
